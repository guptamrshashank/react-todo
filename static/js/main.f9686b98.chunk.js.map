{"version":3,"sources":["Components/TodoComponents/RenderTodoLists.jsx","Components/TodoComponents/TodoBase.jsx","App.js","reportWebVitals.js","index.js"],"names":["RenderTodoLists","props","handleEditing","id","setState","editItemId","editing","state","checkEditingDone","event","key","this","listItems","markAsComplete","markAsPending","updateItem","deleteItem","pendingItems","filter","item","status","completedItems","viewMode","editMode","display","liPendingItems","map","value","style","textAlign","type","onClick","onKeyUp","onChange","e","target","className","liCompletedItems","defaultChecked","Component","TodoBase","changeValue","addToList","inputData","textInputRef","current","todoListData","length","getRndInteger","updatedTodoList","markingItem","updatedItem","createRef","min","max","Math","floor","random","ref","placeholder","React","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9686b98.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass RenderTodoLists extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editing: false,\n      editItemId: null,\n    };\n  }\n\n  handleEditing = (id) => {\n    this.setState({\n      editItemId: id,\n      editing: !this.state.editing,\n    });\n  };\n\n  checkEditingDone = (event, id) => {\n    if (event.key === \"Enter\") {\n      this.handleEditing(id);\n    }\n  };\n\n  render() {\n    const { listItems, markAsComplete, markAsPending, updateItem, deleteItem } =\n      this.props;\n    const { editing, editItemId } = this.state;\n    const pendingItems = listItems.filter((item) => item.status === 1);\n    const completedItems = listItems.filter((item) => item.status === 2);\n\n    let viewMode = {};\n    let editMode = {};\n\n    if (editing) {\n      viewMode.display = \"none\";\n      editMode.display = \"block\";\n    } else {\n      viewMode.display = \"block\";\n      editMode.display = \"none\";\n    }\n\n    const liPendingItems = pendingItems.map((item) => {\n      const { id, value } = item;\n      return (\n        <li key={id} style={{ textAlign: \"-webkit-auto\" }}>\n          <input type=\"checkbox\" onClick={() => markAsComplete(id)} />\n          <label style={editItemId === id ? viewMode : {}}>{value}</label>\n          <input\n            type=\"text\"\n            value={value}\n            style={editItemId === id ? editMode : {}}\n            onKeyUp={(event) => this.checkEditingDone(event, id)}\n            onChange={(e) => updateItem(e.target.value, id)}\n          />\n          <button className=\"edit\" onClick={() => this.handleEditing(id)}>\n            {editing && editItemId === id ? \"Update\" : \"Edit\"}\n          </button>\n          <button className=\"delete\" onClick={() => deleteItem(id)}>\n            Delete\n          </button>\n        </li>\n      );\n    });\n\n    const liCompletedItems = completedItems.map((item) => {\n      const { id, value } = item;\n      return (\n        <li key={id} style={{ textAlign: \"-webkit-auto\" }}>\n          <input\n            type=\"checkbox\"\n            defaultChecked=\"true\"\n            onClick={() => markAsPending(id)}\n          />\n          <label style={editItemId === id ? viewMode : {}}>{value}</label>\n          <input\n            type=\"text\"\n            value={value}\n            style={editItemId === id ? editMode : {}}\n            onKeyUp={(event) => this.checkEditingDone(event, id)}\n            onChange={(e) => updateItem(e.target.value, id)}\n          />\n          <button className=\"edit\" onClick={() => this.handleEditing(id)}>\n            {editing && editItemId === id ? \"Update\" : \"Edit\"}\n          </button>\n          <button className=\"delete\" onClick={() => deleteItem(id)}>\n            Delete\n          </button>\n        </li>\n      );\n    });\n\n    return (\n      <>\n        <h3>Pending Items</h3>\n        <ul>\n          {liPendingItems} {/* dynamic variable rendering */}\n        </ul>\n        <h3>Completed Items</h3>\n        <ul id=\"completed-tasks\">\n          {liCompletedItems} {/* dynamic variable rendering */}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default RenderTodoLists;\n","import React, { createRef } from \"react\";\nimport RenderTodoLists from \"./RenderTodoLists\";\nimport \"./Todo.css\";\n\nclass TodoBase extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoListData: [],\n    };\n    this.inputData = \"\";\n    this.textInputRef = createRef();\n  }\n\n  changeValue = (e) => {\n    //console.log(\"changeValue called\");\n    if (e.key === \"Enter\") {\n      this.addToList();\n      e.target.value = null; // to reset input box(field) as blank\n      return;\n    }\n  };\n\n  getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  addToList = () => {\n    this.inputData = this.textInputRef.current.value;\n    if (!this.inputData) {\n      return;\n    }\n\n    const { todoListData } = this.state;\n    const id = todoListData.length + 1;\n    let status = this.getRndInteger(1, 2);\n    const updatedTodoList = [\n      ...todoListData,\n      { id, value: this.inputData, status },\n    ];\n    this.setState({ todoListData: updatedTodoList });\n    this.textInputRef.current.value = null;\n  };\n\n  markAsComplete = (id) => {\n    const { todoListData } = this.state;\n    const markingItem = todoListData.filter((item) => item.id === id)[0];\n    markingItem.status = 2;\n    const updatedTodoList = [...todoListData, { markingItem }];\n    this.setState({ todoListData: updatedTodoList });\n  };\n\n  markAsPending = (id) => {\n    const { todoListData } = this.state;\n    const markingItem = todoListData.filter((item) => item.id === id)[0];\n    markingItem.status = 1;\n    const updatedTodoList = [...todoListData, { markingItem }];\n    this.setState({ todoListData: updatedTodoList });\n  };\n\n  deleteItem = (id) => {\n    const { todoListData } = this.state;\n    const updatedTodoList = todoListData.filter((item) => item.id !== id);\n    this.setState({ todoListData: updatedTodoList });\n  };\n\n  updateItem = (value, id) => {\n    const { todoListData } = this.state;\n    const updatedItem = todoListData.map((item) => {\n      if (item.id === id) {\n        item = { ...item, value };\n      }\n      return item;\n    });\n    this.setState({ todoListData: updatedItem });\n  };\n\n  render() {\n    const { todoListData } = this.state;\n    return (\n      <>\n        <h2>TODO LIST</h2>\n        <h3>Add Item</h3>\n        <div id=\"input-item\">\n          <input\n            ref={this.textInputRef}\n            onKeyUp={this.changeValue}\n            type=\"text\"\n            placeholder=\"Enter Task\"\n          />\n          <button onClick={this.addToList}>Add</button>\n        </div>\n        <RenderTodoLists\n          listItems={todoListData}\n          markAsComplete={this.markAsComplete}\n          markAsPending={this.markAsPending}\n          updateItem={this.updateItem}\n          deleteItem={this.deleteItem}\n        />\n      </>\n    );\n  }\n}\n//Html - https://codepen.io/BeeCodes/pen/MWYEwov\n\nexport default TodoBase;\n","//import logo from './logo.svg';\nimport \"./App.css\";\nimport TodoBase from \"./Components/TodoComponents/TodoBase\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"container\">\n        {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n        <TodoBase></TodoBase>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}